(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{302:function(e,s,v){"use strict";v.r(s);var a=v(3),t=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_01-redis入门及常用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-redis入门及常用指令"}},[e._v("#")]),e._v(" 01-Redis入门及常用指令")]),e._v(" "),s("p",[e._v("课程链接："),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1cr4y1671t",target:"_blank",rel:"noopener noreferrer"}},[e._v("黑马程序员Redis入门到实战教程"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("内容包括：")]),e._v(" "),s("ol",[s("li",[e._v("Redis 基本特征、安装；")]),e._v(" "),s("li",[e._v("Redis 的常见数据结构")]),e._v(" "),s("li",[e._v("Redis 的常用指令")])]),e._v(" "),s("h2",{attrs:{id:"nosql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nosql"}},[e._v("#")]),e._v(" NoSQL")]),e._v(" "),s("ul",[s("li",[e._v("NoSQL 仅仅是一个概念，泛指"),s("strong",[e._v("非关系型的数据库")]),e._v("，即"),s("code",[e._v("non-relational")]),e._v('，也有叫做"'),s("em",[s("strong",[e._v("Not Only SQL")])]),e._v('"')]),e._v(" "),s("li",[e._v("区别于关系数据库，它们不保证关系数据的 ACID 特性")]),e._v(" "),s("li",[e._v("常见的 NoSQL 数据库有："),s("code",[e._v("Redis")]),e._v("、"),s("code",[e._v("MemCache")]),e._v("、"),s("code",[e._v("MongoDB")]),e._v("等")])]),e._v(" "),s("p",[e._v("NoSQL 与 SQL 的差异：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://image.kongxiao.top/202301071306839.png",alt:"image-20230107130356052"}})]),e._v(" "),s("h2",{attrs:{id:"redis-的特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-的特征"}},[e._v("#")]),e._v(" Redis 的特征")]),e._v(" "),s("p",[e._v("Redis 全称 "),s("code",[e._v("Remote Dictionary Server")]),e._v("，远程词典服务器，是一个基于内存的键值型 NoSQL 数据库。")]),e._v(" "),s("p",[e._v("特征：")]),e._v(" "),s("ul",[s("li",[e._v("键值（"),s("code",[e._v("key-value")]),e._v("）型，value 支持多种不同数据结构，功能丰富")]),e._v(" "),s("li",[e._v("单线程，每个命令具备原子性")]),e._v(" "),s("li",[e._v("低延迟，速度快（"),s("strong",[e._v("基于内存")]),e._v("、IO 多路复用、良好的编码）")]),e._v(" "),s("li",[e._v("支持数据持久化")]),e._v(" "),s("li",[e._v("支持主从集群、分片集群")]),e._v(" "),s("li",[e._v("支持多语言客户端")])]),e._v(" "),s("h2",{attrs:{id:"redis-的安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-的安装"}},[e._v("#")]),e._v(" Redis 的安装")]),e._v(" "),s("p",[e._v("docker 下安装 Redis 步骤：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 拉取redis镜像")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull redis:6.2.6\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建conf文件夹，data文件夹用于挂载")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /usr/local/redis/conf\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /usr/local/redis/data\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-R")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("777")]),e._v(" /usr/local/redis\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 下载redis配置文件")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 配置文件获取地址https://redis.io/docs/manual/config/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /usr/local/redis/conf\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://raw.githubusercontent.com/redis/redis/6.2/redis.conf\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("修改"),s("code",[e._v("redis.conf")]),e._v("文件中的一些配置")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind 0.0.0.0")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 保护模式，设置为yes，并且没有bind指令，没有设置密码，则只允许在本机的回环连接，其他机器无法连接")]),e._v("\nprotected-mode no\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 可选，访问密码")]),e._v("\nrequirepass "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("创建容器并运行：")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建容器，设置端口映射，文件挂载")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("always "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--name")]),e._v(" redis "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v(":6379 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /usr/local/redis/data:/data "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v(" /usr/local/redis/conf:/usr/local/etc/redis "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" redis:6.2.6 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\nredis-server /usr/local/etc/redis/redis.conf  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--appendonly")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yes")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 进入容器")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" 容器ID  redis-cli\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("Redis 其他常用配置：")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 监听的端口")]),e._v("\nport "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("dir")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15")]),e._v("\ndatabases "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置redis能够使用的最大内存")]),e._v("\nmaxmemory 512mb\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 日志文件，默认为空，不记录日志，可以指定日志文件名")]),e._v("\nlogfile "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"redis.log"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("h2",{attrs:{id:"redis-常见数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-常见数据结构"}},[e._v("#")]),e._v(" Redis 常见数据结构")]),e._v(" "),s("p",[e._v("Redis 是一个 key-value 的数据库，key 一般是 String 类型，value 的类型多种多样：")]),e._v(" "),s("ul",[s("li",[e._v("String：字符串")]),e._v(" "),s("li",[e._v("List：有序、可重复集合")]),e._v(" "),s("li",[e._v("Hash：无序字典")]),e._v(" "),s("li",[e._v("Set：无序、不可重复集合")]),e._v(" "),s("li",[e._v("Sorted Set：有序、不可重复集合")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://image.kongxiao.top/202301052244162.png",alt:"image-20220524205926164"}})]),e._v(" "),s("h2",{attrs:{id:"redis-常用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-常用指令"}},[e._v("#")]),e._v(" Redis 常用指令")]),e._v(" "),s("p",[e._v("官网："),s("a",{attrs:{href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://redis.io/"),s("OutboundLink")],1),e._v(" ，"),s("a",{attrs:{href:"http://www.redis.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.redis.cn/"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("Redis 命令参考： "),s("a",{attrs:{href:"http://www.redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.redis.cn/commands.html"),s("OutboundLink")],1),e._v(" ，"),s("a",{attrs:{href:"http://doc.redisfans.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://doc.redisfans.com/"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"key-键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-键"}},[e._v("#")]),e._v(" Key（键）")]),e._v(" "),s("blockquote",[s("p",[e._v("key 的格式一般为 [项目名]:[业务名]:[类型]:[id]")])]),e._v(" "),s("p",[s("strong",[e._v("查找/扫描：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("KEYS pattern")]),e._v("  ：查找所有符合给定模式 pattern 的 key ：\n"),s("ul",[s("li",[e._v("KEYS * ：匹配数据库中所有 key")]),e._v(" "),s("li",[e._v("KEYS h?llo ：匹配 hello ， hallo 和 hxllo 等")]),e._v(" "),s("li",[e._v("KEYS h*llo ：匹配 hllo 和 heeeeello 等")]),e._v(" "),s("li",[e._v("KEYS h[ae]llo ：匹配 hello 和 hallo ，但不匹配 hillo")])])])]),e._v(" "),s("p",[s("strong",[e._v("检查/ 删除 /移动 key：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("EXISTS key")]),e._v("  ：若 key 存在返回 1 ，否则返回 0 ；")]),e._v(" "),s("li",[s("code",[e._v("DEL key [key ...]")]),e._v(" ：删除一个或多个 key，返回被删除 key 的数量，忽略不存在的 key ；")]),e._v(" "),s("li",[s("code",[e._v("MOVE key db")]),e._v(" ：移动到给定的数据库 db 当中，成功返回 1 ，失败则返回 0 ；")]),e._v(" "),s("li",[s("code",[e._v("TYPE key")]),e._v("  ： 返回 key 所储存的值的类型")]),e._v(" "),s("li",[s("code",[e._v("RENAME key newkey")]),e._v(" ：改名，当  key 不存在时，返回一个错误；当 newkey 已经存在时，将覆盖旧值")])]),e._v(" "),s("p",[s("strong",[e._v("生存时间：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("TTL key")]),e._v("  ：  TTL, time to live，以 s 为单位")]),e._v(" "),s("li",[s("code",[e._v("PTTL key")]),e._v(" ：以 ms 为单位\n"),s("ul",[s("li",[e._v("当 key 不存在时，返回 -2 ；")]),e._v(" "),s("li",[e._v("当 key 存在但没有设置剩余生存时间时，返回 -1 ；")]),e._v(" "),s("li",[e._v("否则，返回 key 的剩余生存时间")])])]),e._v(" "),s("li",[s("code",[e._v("EXPIRE key seconds")]),e._v("  ： 设置生存时间，单位为 s，设置成功返回 1，")]),e._v(" "),s("li",[s("code",[e._v("PEXPIRE key milliseconds")]),e._v("  ： 设置生存时间，单位为 ms")]),e._v(" "),s("li",[s("code",[e._v("EXPIREAT key timestamp")]),e._v("  ： 设置生存时间，参数为 UNIX 时间戳")]),e._v(" "),s("li",[s("code",[e._v("PEXPIREAT key milliseconds-timestamp")]),e._v("  ： 设置生存时间，以毫秒为单位的 UNIX 时间戳")]),e._v(" "),s("li",[s("code",[e._v("PERSIST key timestamp")]),e._v("  ： 将给定 key 的生存时间设置为永久；成功则返回 1 ；如果 key 不存在或 key 没有设置生存时间，返回 0")])]),e._v(" "),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[e._v("#")]),e._v(" String")]),e._v(" "),s("blockquote",[s("p",[e._v("String 类型，也就是字符串类型，是 Redis 中最简单的存储类型。")])]),e._v(" "),s("p",[s("strong",[e._v("基本操作：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("SET key value [EX seconds] [PX milliseconds] [NX|XX]")]),e._v("  ： 设置 key-value 类型的值，key 已经存在则覆写旧值并清除原有 TTL 。支持以下参数：\n"),s("ul",[s("li",[e._v("EX second ：设置键的过期时间为 second 秒。 "),s("code",[e._v("SET key value EX second")]),e._v(" 效果等同于 "),s("code",[e._v("SETEX key second value")])]),e._v(" "),s("li",[e._v("PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 "),s("code",[e._v("PSETEX key millisecond value")])]),e._v(" "),s("li",[e._v("NX ：只在键不存在时，才对键进行设置操作。 "),s("code",[e._v("SET key value NX")]),e._v(" 效果等同于 "),s("code",[e._v("SETNX key value")])]),e._v(" "),s("li",[e._v("XX ：只在键已经存在时，才对键进行设置操作。")])])]),e._v(" "),s("li",[s("code",[e._v("GET key")]),e._v("  ： 根据 key 获得对应的 value，如果 key 不存在那么返回特殊值 nil")]),e._v(" "),s("li",[s("code",[e._v("STRLEN key")]),e._v("  ： 返回 key 所储存的字符串值的长度")]),e._v(" "),s("li",[s("code",[e._v("SETEX key seconds value")]),e._v("  ： 设置 vaule 的同时指定 TTL，单位为 s")]),e._v(" "),s("li",[s("code",[e._v("SETNX key value")]),e._v("  ：即 "),s("strong",[e._v("SET if Not eXists")]),e._v("。  key 不存在时才设置，返回 1 ；key 已存在则返回 0")])]),e._v(" "),s("p",[s("strong",[e._v("批量设置：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("MSET key value [key value ...]")]),e._v("  ： 批量设置多个 key-value 对；是一个原子性操作")]),e._v(" "),s("li",[s("code",[e._v("MGET key [key ...]")]),e._v("  ：返回所有(一个或多个)给定 key 的值")])]),e._v(" "),s("p",[s("strong",[e._v("计数器：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("INCR key")]),e._v(" ： value 自增 1；如果 key 不存在，则先初始化为 0 ，然后再执行 INCR 操作")]),e._v(" "),s("li",[s("code",[e._v("INCRBY key increment")]),e._v("  ：指定自增量为 increment")]),e._v(" "),s("li",[s("code",[e._v("DECR key")]),e._v(" ： value 自减 1；如果 key 不存在，则先初始化为 0  ，然后再执行 DECR 操作")]),e._v(" "),s("li",[s("code",[e._v("DECRBY key decrement")]),e._v(" ：指定自减量为 decrement")])]),e._v(" "),s("h3",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[e._v("#")]),e._v(" Hash")]),e._v(" "),s("blockquote",[s("p",[e._v("Hash 类型，也叫散列，其 value 是一个无序字典，类似于Java 中的"),s("code",[e._v("HashMap")]),e._v("结构。")])]),e._v(" "),s("p",[e._v("Hash 结构可以将对象中的每个字段独立存储，可以针对单个字段做 CRUD")]),e._v(" "),s("img",{attrs:{src:"https://image.kongxiao.top/202301052254423.png"}}),e._v(" "),s("p",[e._v("常用指令：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("HSET key filed value [filed value ...]")]),e._v("：设置 key 中的域 field 的值设为 value")]),e._v(" "),s("li",[s("code",[e._v("HGET key filed")]),e._v("：返回指定 key 中给定域 field 的值")]),e._v(" "),s("li",[s("code",[e._v("HMGET key field [field ...]")]),e._v("：返回哈希表 key 中，一个或多个给定域的值")]),e._v(" "),s("li",[s("code",[e._v("HLEN key")]),e._v("：返回指定 key 中域的数量")]),e._v(" "),s("li",[s("code",[e._v("HGETALL key")]),e._v("：返回指定 key 所有的域和值")]),e._v(" "),s("li",[s("code",[e._v("HEXISTS key filed")]),e._v("：查看指定 key、指定域 field 是否存在")]),e._v(" "),s("li",[s("code",[e._v("HDEL key filed[field ...]")]),e._v("：删除指定 key 中，一个或多个给定的 field")]),e._v(" "),s("li",[s("code",[e._v("HKEYS key")]),e._v("：返回指定 key 中，所有的 field")]),e._v(" "),s("li",[s("code",[e._v("HVALS key")]),e._v("：返回指定 key，所有的 field 的 value")]),e._v(" "),s("li",[s("code",[e._v("HSETNX key field value")]),e._v("：当且仅当域 field 不存在时，将指定 key 中的域 field 的值设置为 value")]),e._v(" "),s("li",[s("code",[e._v("HINCRBY key field increment")]),e._v("：为指定 key 中的域 field 的值加上增量 increment")])]),e._v(" "),s("h3",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" List")]),e._v(" "),s("blockquote",[s("p",[e._v("Redis 中的 List 类型与 Java 中的 LinkedList 类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。")])]),e._v(" "),s("p",[e._v("特征也与"),s("code",[e._v("LinkedList")]),e._v("类似：")]),e._v(" "),s("ul",[s("li",[e._v("有序")]),e._v(" "),s("li",[e._v("元素可以重复")]),e._v(" "),s("li",[e._v("插入和删除快")]),e._v(" "),s("li",[e._v("查询速度一般")])]),e._v(" "),s("p",[e._v("常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。常用指令：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("RPUSH key value [value ...]")]),e._v(" ：右边插入；返回执行 RPUSH 操作后，表的长度")]),e._v(" "),s("li",[s("code",[e._v("LPOP key")]),e._v(" ：移除并返回列表 key 最左边的元素")]),e._v(" "),s("li",[s("code",[e._v("LPUSH key value [value ...]")]),e._v(" ：左边插入；返回执行 LRPUSH 操作后，表的长度")]),e._v(" "),s("li",[s("code",[e._v("RPOP key")]),e._v(" ：移除并返回列表 key 最右边的元素")]),e._v(" "),s("li",[s("code",[e._v("BLPOP key timeout")]),e._v("：阻塞版的 "),s("code",[e._v("LPOP")]),e._v("，在没有元素时等待指定时间")]),e._v(" "),s("li",[s("code",[e._v("BRPOP key timeout")]),e._v("：阻塞版的 "),s("code",[e._v("BRPOP")]),e._v("，在没有元素时等待指定时间")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://image.kongxiao.top/20210922175322.png",alt:"redis-list"}})]),e._v(" "),s("ul",[s("li",[s("code",[e._v("LLEN key")]),e._v("：返回列表 key 的长度，如果 key 不存在则返回 0，如果 key 不是列表类型，返回一个错误")]),e._v(" "),s("li",[s("code",[e._v("LRANGE key start stop")]),e._v(" ：返回列表 key 中指定区间内的元素，-1 表示倒数第一")]),e._v(" "),s("li",[s("code",[e._v("LINDEX key index")]),e._v(" ：返回列表 key 中，下标为 index 的元素")]),e._v(" "),s("li",[s("code",[e._v("LINSERT key BEFORE|AFTER pivot value")]),e._v(" ：将值 value 插入到列表 key 中，位于值 pivot 之前或之后。\n"),s("ul",[s("li",[e._v("当 pivot 不存在于列表 key 时，不执行任何操作；")]),e._v(" "),s("li",[e._v("当 key 不存在时， key 被视为空列表，不执行任何操作；")]),e._v(" "),s("li",[e._v("如果 key 不是列表类型，返回一个错误；")]),e._v(" "),s("li",[e._v("如果命令执行成功，返回插入操作完成之后，列表的长度；")]),e._v(" "),s("li",[e._v("如果没有找到 pivot ，返回 -1 ；")]),e._v(" "),s("li",[e._v("如果 key 不存在或为空列表，返回 0")])])]),e._v(" "),s("li",[s("code",[e._v("LREM key count value")]),e._v("：移除列表中与参数 value 相等的元素。返回被移除元素的数量：\n"),s("ul",[s("li",[e._v("count > 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count ；")]),e._v(" "),s("li",[e._v("count < 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值；")]),e._v(" "),s("li",[e._v("count = 0 : 移除表中所有与 value 相等的值")])])])]),e._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" Set")]),e._v(" "),s("blockquote",[s("p",[e._v("Redis 的 Set 结构与 Java 中的 HashSet 类似，可以看做是一个 value 为 null 的 HashMap，具备与 HashSet 类似的特征")])]),e._v(" "),s("ul",[s("li",[e._v("无序")]),e._v(" "),s("li",[e._v("元素不可重复")]),e._v(" "),s("li",[e._v("查找快")]),e._v(" "),s("li",[e._v("支持交集、并集、差集等功能")])]),e._v(" "),s("p",[s("strong",[e._v("常用命令：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("SADD key member [member ...]")]),e._v(" ：添加元素")]),e._v(" "),s("li",[s("code",[e._v("SMEMBERS key")]),e._v("：查看所有元素")]),e._v(" "),s("li",[s("code",[e._v("SISMEMBER key member")]),e._v("：判断 member 元素是否是集合 key 的成员")]),e._v(" "),s("li",[s("code",[e._v("SCARD key")]),e._v("：查看元素个数")]),e._v(" "),s("li",[s("code",[e._v("SREM key member [member ...]")]),e._v("：移除集合 key 中一个或多个 member ，不存在的 member 会被忽略")]),e._v(" "),s("li",[s("code",[e._v("SPOP key")]),e._v("：移除并返回集合中的一个随机元素")]),e._v(" "),s("li",[s("code",[e._v("SMOVE source destination member")]),e._v("：将 member 元素从 source 集合移动到 destination 集合")])]),e._v(" "),s("p",[s("strong",[e._v("数学集合类：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("SDIFF key [key ...]")]),e._v("：返回所有给定集合之间的差集")]),e._v(" "),s("li",[s("code",[e._v("SINNER key [key ...]")]),e._v("：返回所有给定集合之间的交集")]),e._v(" "),s("li",[s("code",[e._v("SUNION key [key ...]")]),e._v("：返回所有给定集合之间的并集")]),e._v(" "),s("li",[s("code",[e._v("SDIFFSTORE destination key [key ...]")]),e._v("：返回所有给定集合之间的差集，将结果保存到 destination")]),e._v(" "),s("li",[s("code",[e._v("SINNERSTORE destination key [key ...]")]),e._v("：返回所有给定集合之间的交集，将结果保存到 destination")]),e._v(" "),s("li",[s("code",[e._v("SUNIONSTORE destination key [key ...]")]),e._v("：返回所有给定集合之间的并集，将结果保存到 destination")])]),e._v(" "),s("p",[e._v("交集、差集、并集图示：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://image.kongxiao.top/202301052259705.png",alt:"image-20220525112632214"}})]),e._v(" "),s("h3",{attrs:{id:"zset-sorted-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zset-sorted-set"}},[e._v("#")]),e._v(" ZSet（Sorted Set）")]),e._v(" "),s("blockquote",[s("p",[e._v("Redis 的 SortedSet 是一个可排序的 set 集合，SortedSet 中的每一个元素都带有一个 score 属性，可以基于score 属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。")])]),e._v(" "),s("p",[e._v("在 Set 基础上，加上一个 scroe 值，SortedSet 具备下列特性：")]),e._v(" "),s("ul",[s("li",[e._v("可排序")]),e._v(" "),s("li",[e._v("元素不重复")]),e._v(" "),s("li",[e._v("查询速度快")])]),e._v(" "),s("p",[e._v("因为 SortedSe的可排序特性，经常被用来实现排行榜这样的功能。")]),e._v(" "),s("p",[e._v("常见命令：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ZADD key score member [[score member] [score member] ...]")]),e._v("：添加元素，指定 score 值")]),e._v(" "),s("li",[s("code",[e._v("ZRANGE key start stop [WITHSCORES]")]),e._v("：返回指定区间内的成员，按 score 值递增排序")]),e._v(" "),s("li",[s("code",[e._v("ZREVRANGE key start stop [WITHSCORES]")]),e._v("：同上，逆序")]),e._v(" "),s("li",[s("code",[e._v("ZRANGEBYSCORE key min max [WITHSCORES]")]),e._v("：返回指定 score 区间内的成员，按 score 值递增排序")]),e._v(" "),s("li",[s("code",[e._v("ZREVRANGEBYSCORE key min max [WITHSCORES]")]),e._v("：同上，逆序")]),e._v(" "),s("li",[s("code",[e._v("ZSCORE key member")]),e._v("：返回有序集 key 中，成员 member 的 score 值")]),e._v(" "),s("li",[s("code",[e._v("ZRANK key member")]),e._v("：返回有序集 key 中成员 member 的排名")]),e._v(" "),s("li",[s("code",[e._v("ZCARD key")]),e._v("：查看元素个数")]),e._v(" "),s("li",[s("code",[e._v("ZCOUNT key min max")]),e._v("：返回 score 在 min 和 max 之间的成员数量")]),e._v(" "),s("li",[s("code",[e._v("ZREM key member [member ...]")]),e._v("：移除有序集 key 中的一个或多个成员")])])])}),[],!1,null,null,null);s.default=t.exports}}]);