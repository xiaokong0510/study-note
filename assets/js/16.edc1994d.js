(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{299:function(s,t,a){"use strict";a.r(t);var e=a(3),_=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_05-mysql-中的锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_05-mysql-中的锁"}},[s._v("#")]),s._v(" 05-MySQL 中的锁")]),s._v(" "),t("p",[s._v("课程链接：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/69862",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 实战 45 讲 06 | 全局锁和表锁 ：给表加个字段怎么有这么多阻碍？"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/70215",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 实战 45 讲 07 | 行锁功过：怎么减少行锁对性能的影响？"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("数据库锁设计的初衷是处理并发问题，内容包括：")]),s._v(" "),t("ul",[t("li",[s._v("全局锁")]),s._v(" "),t("li",[s._v("表级锁\n"),t("ul",[t("li",[s._v("表锁")]),s._v(" "),t("li",[s._v("元数据锁")])])]),s._v(" "),t("li",[s._v("行锁\n"),t("ul",[t("li",[s._v("两阶段锁")]),s._v(" "),t("li",[s._v("死锁和死锁检测")])])])]),s._v(" "),t("h2",{attrs:{id:"全局锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局锁"}},[s._v("#")]),s._v(" 全局锁")]),s._v(" "),t("p",[s._v("给整个数据库实例加锁，整个数据库处于只读状态，客户端断开的时候自动释放。命令：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# FTWRL")]),s._v("\nFlush tables with "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" lock \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 释放锁")]),s._v("\nunlock tables\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("加全局锁后，以下语句会被阻塞：")]),s._v(" "),t("ul",[t("li",[s._v("数据定义语句（DDL，包括建表、修改表结构等）")]),s._v(" "),t("li",[s._v("数据操作语句（DML，数据的增删改）")]),s._v(" "),t("li",[s._v("更新类事务的提交语句")])]),s._v(" "),t("h3",{attrs:{id:"全库逻辑备份"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全库逻辑备份"}},[s._v("#")]),s._v(" 全库逻辑备份")]),s._v(" "),t("p",[s._v("全局锁的典型使用场景是，做"),t("strong",[s._v("全库逻辑备份")]),s._v("。")]),s._v(" "),t("p",[s._v("需要保证备份的得到的库是一个逻辑时间点，否则数据可能会不一致。通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。但是备份过程中如果整个库完全处于只读状态，会影响到业务。")]),s._v(" "),t("p",[s._v("另外一种方式，在可重复读隔离级别下开启一个事务也能够拿到一致性视图。官方自带的逻辑备份工具 "),t("code",[s._v("mysqldump")]),s._v("， 使用参数"),t("code",[s._v("-single-transaction")]),s._v("，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。")]),s._v(" "),t("p",[s._v("有一致性视图功能，为什么还需要 FTWRL ？")]),s._v(" "),t("p",[s._v("因为"),t("strong",[s._v("需要引擎要支持这个隔离级别")]),s._v("。对于不支持事务的引擎比如 MyISAM，如果备份过程中有更新，总是只能取到最新的数据，就破坏了备份的一致性。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("set global readonly=true")]),s._v(" 也可以让全库进入只读状态，但还是会建议用 FTWRL 方式，原因：")]),s._v(" "),t("ul",[t("li",[s._v("readonly 的值可能会被用来做其他逻辑，比如用来判断一个库是主库还是备库，修改 global 变量的方式影响面更大；")]),s._v(" "),t("li",[s._v("在异常处理机制上有差异。执行 FTWRL 命令之后由于客户端发生异常断开，全局锁会自动释放；而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态")])]),s._v(" "),t("h2",{attrs:{id:"表级锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表级锁"}},[s._v("#")]),s._v(" 表级锁")]),s._v(" "),t("h3",{attrs:{id:"表锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表锁"}},[s._v("#")]),s._v(" 表锁")]),s._v(" "),t("p",[s._v("语法：")]),s._v(" "),t("ul",[t("li",[s._v("加表锁："),t("code",[s._v("lock tables ... read/write")]),s._v("。read 是共享锁， write 是排它锁。")]),s._v(" "),t("li",[s._v("释放锁："),t("code",[s._v("unlock tables")])])]),s._v(" "),t("p",[s._v("特点：不仅会限制别的线程的读写，也限定了本线程接下来的操作对象。")]),s._v(" "),t("p",[s._v("例如在某个线程 A 中执行 "),t("code",[s._v("lock tables t1 read, t2 write;")]),s._v("则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 "),t("code",[s._v("unlock tables")]),s._v(" 之前，也只能执行读 t1、读写 t2 的操作，也不能访问其他表。")]),s._v(" "),t("h3",{attrs:{id:"mdl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mdl"}},[s._v("#")]),s._v(" MDL")]),s._v(" "),t("p",[t("strong",[s._v("元数据锁")]),s._v("（metadata lock，MDL）是 server 层的锁，也是表级锁，主要用于隔离 DML 和 DDL 操作之间的干扰。在 MySQL 5.5 版本中引入了 MDL，不需要显式使用，在访问一个表的时候会被自动加上。用于保证读写的正确性。")]),s._v(" "),t("ul",[t("li",[s._v("当对一个表做增删改查操作的时候，加 MDL 读锁；")]),s._v(" "),t("li",[s._v("当要"),t("strong",[s._v("对表做结构变更操作")]),s._v("的时候，加 MDL 写锁；")]),s._v(" "),t("li",[s._v("读锁之间不互斥，加读锁则所有线程可正常读元数据，不影响增删改查操作，只是不能修改表结构；")]),s._v(" "),t("li",[s._v("读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。加写锁则只有拥有锁的线程可以读写元数据，也就是修改表结构，其它线程不能执行任何操作，包括修改表结构与增删改查。")])]),s._v(" "),t("p",[s._v("事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，"),t("strong",[s._v("而会等到整个事务提交后再释放。")])]),s._v(" "),t("h3",{attrs:{id:"如何安全给表加字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何安全给表加字段"}},[s._v("#")]),s._v(" 如何安全给表加字段")]),s._v(" "),t("p",[s._v("一个案例：给一个小表加个字段导致整个库挂了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://image.kongxiao.top/20221110230051.png",alt:"image-20221110230043373"}})]),s._v(" "),t("ol",[t("li",[s._v("session A 先启动，这时候会对表 t 加一个 MDL 读锁；")]),s._v(" "),t("li",[s._v("由于 session B 需要的也是 MDL 读锁，因此可以正常执行；")]),s._v(" "),t("li",[s._v("session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞；")]),s._v(" "),t("li",[s._v("之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于这个表现在完全不可读写了；")]),s._v(" "),t("li",[s._v("如果某个表上的查询语句频繁，而且客户端有重试机制，即超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。")])]),s._v(" "),t("blockquote",[t("p",[s._v("参考文章："),t("a",{attrs:{href:"https://blog.csdn.net/q2878948/article/details/96430129",target:"_blank",rel:"noopener noreferrer"}},[s._v("mysql MDL读写锁阻塞，以及online ddl造成的“插队”现象"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("申请 MDL 锁的操作会形成一个队列，"),t("strong",[s._v("队列中写锁获取优先级高于读锁")]),s._v("。一旦出现写锁等待，不但当前操作会被阻塞，同时还会阻塞后续该表的所有操作。事务一旦申请到 MDL 锁后，直到事务执行完才会将锁释放")])]),s._v(" "),t("p",[s._v("如何安全给表加字段：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("首先要解决长事务，事务不提交，就会一直占着 MDL 锁。查到当前执行中的事务："),t("code",[s._v("SELECT * FROM information_schema.innodb_trx")]),s._v("。如果要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务；")])]),s._v(" "),t("li",[t("p",[s._v("要变更一个数据量不大的热点表，这时 kill 未必管用，因为新的请求马上就来了。可以在 "),t("code",[s._v("alter table")]),s._v(" 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后再通过重试命令重复这个过程。")])])]),s._v(" "),t("h2",{attrs:{id:"行锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行锁"}},[s._v("#")]),s._v(" 行锁")]),s._v(" "),t("p",[s._v("锁住整个表的影响面太大，需要更细粒度的锁。")]),s._v(" "),t("p",[s._v("MySQL 的行锁是在引擎层由各个引擎自己实现的。"),t("strong",[s._v("MyISAM 仅支持表锁，而 InnoDB 引擎支持行锁。")])]),s._v(" "),t("p",[s._v("行锁的实现是通过给索引上的索引项添加锁实现的，故只有当执行的脚本走索引时，InnoDB 才会使用行锁，否则InnoDB 只能使用元数据锁 MDL。")]),s._v(" "),t("h3",{attrs:{id:"两阶段锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两阶段锁"}},[s._v("#")]),s._v(" 两阶段锁")]),s._v(" "),t("p",[s._v("两阶段锁协议：在 InnoDB 事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。")]),s._v(" "),t("p",[t("strong",[s._v("对于高并发的行记录的操作语句可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能。")])]),s._v(" "),t("h3",{attrs:{id:"死锁和死锁检测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死锁和死锁检测"}},[s._v("#")]),s._v(" 死锁和死锁检测")]),s._v(" "),t("p",[s._v("死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态。")]),s._v(" "),t("p",[s._v("当出现死锁以后，有两种策略：")]),s._v(" "),t("ul",[t("li",[s._v("一是直接进入等待，直到超时。超时时间可以通过参数 "),t("code",[s._v("innodb_lock_wait_timeout")]),s._v(" 来设置，默认50 s。对于在线服务来说，这个等待时间往往是无法接受的；但是超时时间设置太短的话，会出现很多误伤。")]),s._v(" "),t("li",[s._v("二是发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。参数 "),t("code",[s._v("innodb_deadlock_detect")]),s._v(" 默认为 on，表示开启这个逻辑。")])]),s._v(" "),t("p",[s._v("主动死锁检测有额外负担。每当一个事务被锁时，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。")]),s._v(" "),t("p",[s._v("减少死锁的主要方向，就是控制访问相同资源的并发事务量。")]),s._v(" "),t("h3",{attrs:{id:"热点行更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热点行更新"}},[s._v("#")]),s._v(" 热点行更新")]),s._v(" "),t("p",[s._v("如果所有事务都要更新同一行，每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，时间复杂度是 O(n) 。")]),s._v(" "),t("p",[s._v("假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此会看到 CPU 利用率很高，但是每秒却执行不了几个事务。")]),s._v(" "),t("p",[s._v("解决策略：")]),s._v(" "),t("ol",[t("li",[s._v("确保业务上不会产生死锁，直接将死锁检测关闭，弊端是可能会出现大量的超时，对业务有损的；")]),s._v(" "),t("li",[s._v("在数据库中间件中统一对更新同一行的请求进行排队，控制并发度；")]),s._v(" "),t("li",[s._v("拆行，将一行拆成逻辑上的多行来减少锁冲突；有点分段锁的意思，但是需要根据业务逻辑做详细设计。")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("思考题 1： 备份一般都会在备库上执行，在用 "),t("code",[s._v("–single-transaction")]),s._v(" 方法做逻辑备份的过程中，如果主库上的一个小表做了一个 DDL，比如给一个表上加了一列。这时候，从备库上会看到什么现象？")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置 RR 隔离级别 ")]),s._v("\nQ1: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SESSION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TRANSACTION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ISOLATION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEVEL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("REPEATABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动事务,得到一个一致性视图")]),s._v("\nQ2: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("START")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TRANSACTION")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CONSISTENT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SNAPSHOT")]),s._v("；\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* other tables */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置一个保存点")]),s._v("\nQ3: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SAVEPOINT")]),s._v(" sp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 时刻 1 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拿到表结构")]),s._v("\nQ4: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 时刻 2 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出数据")]),s._v("\nQ5: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 时刻 3 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回滚到 SAVEPOINT sp，释放锁")]),s._v("\nQ6: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROLLBACK")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SAVEPOINT")]),s._v(" sp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 时刻 4 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* other tables */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("分析以上 4 个不同时刻，DDL 从主库传过来的效果。")]),s._v(" "),t("p",[s._v("答案：")]),s._v(" "),t("ol",[t("li",[s._v("如果在 Q4 语句执行之前到达，现象：没有影响，备份拿到的是 DDL 后的表结构；")]),s._v(" "),t("li",[s._v("如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 "),t("code",[s._v("Table definition has changed, please retry transaction")]),s._v("，现象：mysqldump 终止；")]),s._v(" "),t("li",[s._v("如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。")]),s._v(" "),t("li",[s._v("从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 前的表结构。")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("思考题 2：如果要删除一个表里面的前 10000 行数据，以下哪种方法更好：")]),s._v(" "),t("ul",[t("li",[s._v("第一种，直接执行 delete from T limit 10000")]),s._v(" "),t("li",[s._v("第二种，在一个连接中循环执行 20 次 delete from T limit 500")]),s._v(" "),t("li",[s._v("第三种，在 20 个连接中同时执行 delete from T limit 500")])]),s._v(" "),t("p",[s._v("答案：")]),s._v(" "),t("ul",[t("li",[s._v("第二种方式更好。串行化执行，将相对长的事务分成多次相对短的事务，则每次事务占用锁的时间相对较短。")]),s._v(" "),t("li",[s._v("第一种方式：单个语句占用时间长，锁的时间也比较长；而且大事务还会导致主从延迟。")]),s._v(" "),t("li",[s._v("第三种方式：人为自己制造锁竞争，加剧并发量。")])])])}),[],!1,null,null,null);t.default=_.exports}}]);